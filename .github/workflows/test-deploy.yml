on:
  pull_request:
    types:
      - opened
      - synchronize

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  REGISTRY: ${{vars.REGISTRY_NAME}}
  IMAGE_NAME: ticklabvn/ssps-be-test-deploy
  CD_USERNAME: ${{github.actor}}

name: Test releasing and deploying

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'test/staging'
    steps:
      - uses: actions/checkout@v3
        name: Checkout repository

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.CD_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    env:
      POSTGRES_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:${{secrets.POSTGRES_PORT}}/${{ secrets.POSTGRES_DB }}?schema=public
    if: github.event.pull_request.base.ref == 'test/staging'
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          port: ${{ secrets.VPS_PORT }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}

          script: |
            export CR_PAT=${{ secrets.REGISTRY_TOKEN }}
            echo $CR_PAT | docker login ${{ env.REGISTRY }} -u ${{ env.CD_USERNAME }} --password-stdin
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            
            mkdir -p $HOME/${{env.IMAGE_NAME}} && cd $HOME/${{env.IMAGE_NAME}}

            rm -f .env
            echo FASTIFY_PORT=${{ secrets.FASTIFY_PORT }} >> .env
            echo FASTIFY_TEST_PORT=${{ secrets.FASTIFY_PORT_TEST_DEPLOY }} >> .env
            echo >> .env            

            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
            echo POSTGRES_TEST_PORT=${{ secrets.POSTGRES_PORT_TEST_DEPLOY }} >> .env
            echo POSTGRES_URL=${{ env.POSTGRES_URL }} >> .env
            echo >> .env   

            echo CORS_WHITE_LIST=${{ secrets.CORS_WHITE_LIST }} >> .env
            echo COOKIE_SECRET=${{ secrets.COOKIE_SECRET }} >> .env
            echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
            echo >> .env   

            echo MINIO_URL=${{ secrets.MINIO_URL }} >> .env
            echo MINIO_SERVER_ENDPOINT=${{ secrets.MINIO_SERVER_ENDPOINT }} >> .env
            echo MINIO_PORT=${{ secrets.MINIO_PORT }} >> .env
            echo MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }} >> .env
            echo MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }} >> .env
            echo MINIO_BUCKET_NAME=${{ secrets.MINIO_BUCKET_NAME }} >> .env
            echo >> .env   

            echo CHECKOUT_ENVIRONMENT=${{ vars.CHECKOUT_ENVIRONMENT }} >> .env
            echo PAYPAL_LIVE_ENDPOINT=${{ vars.PAYPAL_LIVE_ENDPOINT }} >> .env
            echo PAYPAL_SANDBOX_ENDPOINT=${{ vars.PAYPAL_SANDBOX_ENDPOINT }} >> .env
            echo PAYPAL_CLIENT_ID=${{ secrets.PAYPAL_CLIENT_ID }} >> .env
            echo PAYPAL_CLIENT_SECRET=${{ secrets.PAYPAL_CLIENT_SECRET }} >> .env
            echo >> .env   

            echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> .env
            echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> .env
            echo GOOGLE_REDIRECT_URL=${{ secrets.GOOGLE_REDIRECT_URL }} >> .env
            echo UI_HOME_URL=${{ secrets.UI_HOME_URL }} >> .env
            echo >> .env   

            curl -s https://${{secrets.READ_FILE_ACCESS_TOKEN}}@raw.githubusercontent.com/${{github.repository}}/${{github.head_ref}}/docker-compose.test-deploy.yml -O -f
            docker compose down --volumes --remove-orphans
            docker compose -f docker-compose.test-deploy.yml up -d ${{vars.DOCKER_COMPOSE_DEPLOY_SERVICE_NAME}}

            docker exec -it $(docker ps --filter "ancestor=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" -q) /bin/sh -c "npx prisma db seed"
            
            docker logout ${{ env.REGISTRY }}