on:
  push:
    branches:
      - test/implement-cd-using-github-action

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  REGISTRY: ${{vars.REGISTRY_NAME}}
  IMAGE_NAME: ${{github.repository}}
  CD_USERNAME: ${{github.actor}}

name: Release and deploy

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: node
          pull-request-header: "Bot (:robot:) requested to create a new release on ${{ github.ref_name }}"

  build:
    name: Build
    # needs: [release]
    runs-on: ubuntu-latest
    # if: ${{ needs.release.outputs.build == 'true' }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout repository

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.CD_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          # tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.tag_name }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    env:
      POSTGRES_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }}?schema=public
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          port: ${{ secrets.VPS_PORT }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}

          script: |
            export CR_PAT=${{ secrets.REGISTRY_TOKEN }}
            echo $CR_PAT | docker login ${{ env.REGISTRY }} -u ${{ env.CD_USERNAME }} --password-stdin
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            
            cd $HOME/thesis-222
            rm -f .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_URL=${{ env.POSTGRES_URL }} >> .env
            echo COOKIE_SECRET=${{ secrets.COOKIE_SECRET }} >> .env
            echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
            echo MINIO_URL=${{ secrets.MINIO_URL }} >> .env
            echo MINIO_SERVER_ENDPOINT=${{ secrets.MINIO_SERVER_ENDPOINT }} >> .env
            echo MINIO_PORT=${{ secrets.MINIO_PORT }} >> .env
            echo MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }} >> .env
            echo MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }} >> .env
            echo MINIO_BUCKET_NAME=${{ secrets.MINIO_BUCKET_NAME }} >> .env
            
            # curl ${{secrets.DOCKER_COMPOSE_RAW_FILE_URL}} -o docker-compose.yml
            docker-compose stop fastify
            docker-compose rm -f fastify
            docker-compose up -d fastify
            
            docker logout ${{ env.REGISTRY }}
            
